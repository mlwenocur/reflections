What happens when you initialize a repository? Why do you need to do it?
Answer: the .git directory and all its subdirectories and files are initialized. So that the files and directories needed to track snapshots of the working directory are available and initialized.

How is the staging area different from the working directory and the repository? What value do you think it offers?
Answer: This is a little misleading since the index sits inside the .git repository. At the very least there should a cleaner definition of terms. The staging area is used for selecting specific files to be added in a particular commit, making it easy to double-check that one is committing just the desired files. It can also act as a  snapshot of a file at the time of the "add", so for example when you are adding an object and have some of its methods working one can do add at that point. If additional methods create bugs you can still move forward by doing a commit and seeing what has changed. If everything goes smoothly you do another add once the object is complete and just one commit since all its methods are closely related.

First part of the question: The repository represents all previous snapshots of the working directory, the working directory gives the complete current status of all working files, whereas the staging area represents snapshots of various files at the time they were added.


Useful commands:
git diff (without arguments) shows diffs between working directory and staging area.

git diff --staged shows diffs between staging area and repo

git reset --hard (resets staging area and working directory to equal committed values; USE WITH CAUTION)

git checkout master (resets branch to master branch)

git checkout -b newBranch (creates "newBranch" and then checks it out so that it becomes the active branch)

git log --graph --oneline a b (graphically shows how a and b diverged as new commits were made to their common ancestor)

How can you use the staging area to make sure you have one commit per logical change?
Answer: One can use "git diff" to see what changes have been staged from the working directory, allowing one to see if all the unstaged files are irrelevant to the logical change inherent in the staging area. Conversely, by running "git diff --staged" enables one to see if the proposed commits in the staging area form a coherent logical change.

One should stage and commit based on homogeneous character of proposed changes or committing to save a current testing and working set of files. Integrate, test, and upload religiously!

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
Answer: Keeping track of tested milestones so that one can see the changes between milestones which might be useful in case of debugging or the need to backtrack. Though the master branch and an experimental branch that is merged with the master at each tested milestone would serve the same purpose. 

Branching would also be useful when one wants to keep a record of when a set of changes are deemed deficient or lead to unexpected complexity but one may want or need to revisit them in the future.
For example, git branch failed-homotopy_experiment. 

How do the diagrams help you visualize the branch structure?
Answer: One can see how the different branches changed from the grand-ancestor branch as each branch is updated with new commits.


What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
Answer: A merge updates the current head to reflects all the commits made by the branches in the merge. Difficulties arise where commits conflict by the deletion of code or where a function say has been modified in two different ways. ... We present the merge diagram with branch that has been updated with merge as absorbing the partner branches.