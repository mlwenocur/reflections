When would you want to use a remote repository rather than keeping all your work
local?

    To protect against local disk crash, to enable others to clone it, and to amuse the old and educate the young.

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

    Automated pulling seems a way to ensure madness especially if the pulling occurs on the branch currently checked out. It might make sense if one is using the checked out repository to build the latest version of some application. Assuming of course that application features aren't disappearing or changing.

Describe the differences between forks, clones, and branches.  When would you
use one instead of another?

    A fork is just a request for GitHub to clone the project and registers it under your username, whereas a clone can be done remotely or locally to create a new repository, though it is not clear what the advantage to a local clone might be. I suppose a local clone could be a way to instantiate a somewhat different version of the same application so that a debugger could be run on each repository separately. Branches happen in the same repository and use git's wonderfulness to keep track of different versions of the same code.

What is the benefit of having a copy of the last known state of the remote
stored locally?

    One can see how far the working repository has diverged from the remote. It may also help when planning the merge. For 
	example, one may want to commit current changes and then checkout previous commits (perhaps creating a new branch say newMaster), merge those with origin/master and then move forward in this process by merging with next commit of the master until you get to last committed master branch. At that point checkout master and merge with newMaster.
	
	So for explicitness:
	1) Commit changes to master.
	2) Master -> m5 -> m4 -> m3 -> ...
	3) git tag unMergedMaster (tag current master branch)
	4) git checkout unMergedMaster~2
	5) git checkout -b newMaster
	6) git merge newMaster origin/master
	7) git merge newMaster m4
	8) git merge newMaster m5
	9) git checkout master
	10) git merge master newMaster
	11) git push origin master
	
	Testing and resolving conflicts along the way.

How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?

    Except in very restricted circumstances, for example, you have just one other collaborator, it is hard to imagine how doing this without github or at least git would be easier. If one is working in close physical proximity one could have a colleague check it out before doing a remote merge which might be preferable if there is a time crunch.

When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?

    A separate branch is worth the added complexity when one is trying a major experiment on the current code base. On the release side of the equation branching enables the orderly transition from alpha code to candidate code to release code. Another example may be when one is doing a major reorganization of what is otherwise working code for the purpose of improving maintainability or easing the addition of major new features.
	
	A separate branch on GitHub allows others perhaps to more easily see changes you are proposing. If they pull your code they are also less likely to unintentionally alter their own master branch.
	
	The advantage of staying on the master branch is its simplicity, especially for the work flow.

	
	
SOME github notes:

git fetch origin: create a new branch called origin/master
git merge master origin/master: now try to merge master with origin/master (note master currently checkout)
git fetch origin; git merge == git pull origin
git add updatedFiles
git commit -m "#"
git push origin master: update remote with newly locally merged file.